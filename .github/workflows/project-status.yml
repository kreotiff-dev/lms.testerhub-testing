name: Sync project status from labels (user project v2)

on:
  issues:
    types: [labeled]

jobs:
  sync-status:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            // ==== НАСТРОЙКИ ====
            const PROJECT_OWNER = "kreotiff-dev"; // твой юзернейм
            const PROJECT_NUMBER = 1;             // номер user-проекта LMS.TESTERHUB TESTING
            const LABEL_TO_STATUS = {
              "status:ready-for-testing": "Ready for testing",
              "status:in-testing":        "In testing",
              "status:done":              "Done",
              "status:todo":              "Todo",
            };

            // Разрешённые переходы (мини-стейт-машина)
            // Ключ: откуда -> множество куда можно
            const ALLOWED = {
              "Ready for testing": new Set(["In testing"]),                          // только в In testing
              "In testing":        new Set(["Done", "Ready for testing", "Todo"]),   // вперёд в Done, или назад
              // Любые прочие статусы считаем закрытыми для внешних: запрещаем
            };
            const LOCKED = new Set(["In progress", "Done"]); // из этих статусов менять нельзя

            // ==== ЛОГИКА ====
            const issue = context.payload.issue;
            const newLabel = context.payload.label?.name;
            if (!newLabel || !(newLabel in LABEL_TO_STATUS)) {
              core.info("Label not mapped to a status, exiting.");
              return;
            }
            const targetStatusName = LABEL_TO_STATUS[newLabel];

            // 1) Получаем сам проект и поле Status (USER, не ORG!)
            const proj = await github.graphql(`
              query($owner:String!, $number:Int!){
                user(login:$owner){
                  projectV2(number:$number){
                    id
                    fields(first:50){
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options { id name }
                        }
                      }
                    }
                    items(first:100){
                      nodes {
                        id
                        content { ... on Issue { id number } }
                        fieldValues(first:20){
                          nodes {
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              field { ... on ProjectV2SingleSelectField { name id } }
                              name
                              optionId
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }`,
              { owner: PROJECT_OWNER, number: PROJECT_NUMBER }
            );

            const project = proj.user.projectV2;
            if (!project) {
              core.setFailed("Project not found. Check PROJECT_OWNER/PROJECT_NUMBER.");
              return;
            }
            const statusField = project.fields.nodes.find(f => f?.name === "Status");
            if (!statusField) {
              core.setFailed("Status field not found in the project.");
              return;
            }
            const statusOption = statusField.options.find(o => o.name === targetStatusName);
            if (!statusOption) {
              core.setFailed(`Status option '${targetStatusName}' not found in the project.`);
              return;
            }

            // 2) Получаем nodeId issue
            const qIssue = await github.graphql(`
              query($owner:String!, $repo:String!, $number:Int!){
                repository(owner:$owner, name:$repo){
                  issue(number:$number){ id }
                }
              }`,
              { owner: context.repo.owner, repo: context.repo.repo, number: issue.number }
            );
            const issueId = qIssue.repository.issue.id;

            // 3) Ищем item в проекте
            let item = project.items.nodes.find(n => n.content?.id === issueId);
            // если нет — добавляем
            if (!item) {
              const added = await github.graphql(`
                mutation($projectId:ID!, $contentId:ID!){
                  addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) {
                    item { id }
                  }
                }`,
                { projectId: project.id, contentId: issueId }
              );
              item = { id: added.addProjectV2ItemById.item.id, fieldValues: { nodes: [] } };
            }

            // 4) Определяем текущий статус
            let currentStatusName = null;
            for (const fv of (item.fieldValues?.nodes || [])) {
              if (fv?.field?.name === "Status") { currentStatusName = fv?.name || null; break; }
            }
            core.info(`Current status: ${currentStatusName ?? "(none)"}, target: ${targetStatusName}`);

            // 5) Правила переходов
            if (currentStatusName && LOCKED.has(currentStatusName)) {
              core.info(`Blocked: current status '${currentStatusName}' is locked.`);
              return; // запрещаем менять из In progress и Done
            }
            if (currentStatusName && ALLOWED[currentStatusName]) {
              if (!ALLOWED[currentStatusName].has(targetStatusName)) {
                core.info(`Transition '${currentStatusName}' -> '${targetStatusName}' is not allowed. Skipping.`);
                return;
              }
            } else if (currentStatusName && !ALLOWED[currentStatusName]) {
              // Для статусов вне явных правил — запрещаем
              core.info(`Status '${currentStatusName}' not managed by external transitions. Skipping.`);
              return;
            }

            // 6) Обновляем поле Status
            await github.graphql(`
              mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!){
                updateProjectV2ItemFieldValue(input:{
                  projectId:$projectId,
                  itemId:$itemId,
                  fieldId:$fieldId,
                  value:{ singleSelectOptionId:$optionId }
                }) {
                  projectV2Item { id }
                }
              }`,
              { projectId: project.id, itemId: item.id, fieldId: statusField.id, optionId: statusOption.id }
            );

            core.info(`Status updated to '${targetStatusName}'.`);
